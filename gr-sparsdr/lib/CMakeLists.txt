# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-sparsdr
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.


########################################################################
# Find library dependencies
########################################################################

find_package(UHD REQUIRED)
find_package(IIO REQUIRED)

########################################################################
# Set up to run cargo to compile the Rust library
########################################################################

# Look for cargo
find_program(
    CARGO_BINARY
    NAMES cargo
    HINTS $ENV{HOME}/.cargo/bin
)
if (CARGO_BINARY)
    message(STATUS "Found cargo: ${CARGO_BINARY}")
else()
    message(FATAL_ERROR "Can't find cargo. Check that the Rust compiler and Cargo are installed.")
endif()

set(RECONSTRUCT_TARGET_FOLDER ${CMAKE_SOURCE_DIR}/../reconstruct/target/release)
# Make the target directory to avoid CMake errors
# cargo will generate the actual files later
file(MAKE_DIRECTORY ${RECONSTRUCT_TARGET_FOLDER})

set(RECONSTRUCT_LIBRARY_PATH ${RECONSTRUCT_TARGET_FOLDER}/libsparsdr_reconstruct.a)

add_custom_target(
    sparsdr_reconstruct_cargo
    COMMAND ${CARGO_BINARY} +stable build --release
    BYPRODUCTS ${RECONSTRUCT_LIBRARY_PATH}
        ${RECONSTRUCT_TARGET_FOLDER}/sparsdr_reconstruct.hpp
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/../reconstruct/sparsdr_reconstruct_c
    COMMENT "Compiling Rust code for reconstruct library"
)
add_library(
    sparsdr_reconstruct::sparsdr_reconstruct STATIC IMPORTED
)
add_dependencies(sparsdr_reconstruct::sparsdr_reconstruct sparsdr_reconstruct_cargo)
set_target_properties(
    sparsdr_reconstruct::sparsdr_reconstruct PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES ${RECONSTRUCT_TARGET_FOLDER}
    IMPORTED_LOCATION ${RECONSTRUCT_LIBRARY_PATH}
)

# When cleaning, also delete the cargo target folder
set_property(DIRECTORY PROPERTY ADDITIONAL_MAKE_CLEAN_FILES ${CMAKE_SOURCE_DIR}/../reconstruct/target)

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX

list(APPEND sparsdr_sources
    combined_common.cc
    combined_pluto_receiver_impl.cc
    combined_usrp_receiver_impl.cc
    compressing_usrp_source_impl.cc
    compressing_pluto_source_impl.cc
    compressing_source.cc
    endian_converter.cc
    fft_bin_calculator.c
    iio_device_source_impl.cc
    reconstruct_impl.cc
    simple_combined_pluto_receiver_impl.cc
    simple_combined_usrp_receiver_impl.cc
    swap_16_impl.cc
    window.cc
)

set(sparsdr_sources "${sparsdr_sources}" PARENT_SCOPE)
if(NOT sparsdr_sources)
    MESSAGE(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT sparsdr_sources)

add_library(gnuradio-sparsdr SHARED ${sparsdr_sources})
target_link_libraries(gnuradio-sparsdr
    gnuradio::gnuradio-runtime
    gnuradio::gnuradio-uhd
    gnuradio::gnuradio-blocks
    UHD::uhd
    IIO::IIO
    sparsdr_reconstruct::sparsdr_reconstruct
)
target_include_directories(gnuradio-sparsdr
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
  )
set_target_properties(gnuradio-sparsdr PROPERTIES DEFINE_SYMBOL "gnuradio_sparsdr_EXPORTS")

# Extra compiler warnings
if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR
    CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
    target_compile_options(gnuradio-sparsdr PRIVATE -Wall -Wextra -pedantic)
endif()

if(APPLE)
    set_target_properties(gnuradio-sparsdr PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-sparsdr)

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

# If your unit tests require special include paths, add them here
#include_directories()
# List all files that contain Boost.UTF unit tests here
list(APPEND test_sparsdr_sources
)
# Anything we need to link to for the unit tests go here
list(APPEND GR_TEST_TARGET_DEPS gnuradio-sparsdr)

if(NOT test_sparsdr_sources)
    MESSAGE(STATUS "No C++ unit tests... skipping")
    return()
endif(NOT test_sparsdr_sources)

foreach(qa_file ${test_sparsdr_sources})
    GR_ADD_CPP_TEST("sparsdr_${qa_file}"
        ${CMAKE_CURRENT_SOURCE_DIR}/${qa_file}
    )
endforeach(qa_file)
